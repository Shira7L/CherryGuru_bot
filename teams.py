from dotenv import load_dotenv
import os
import asyncio
import random
import urllib.parse
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
import aioschedule
from sqlalchemy import Column, Integer, select
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base

load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher()

DATABASE_URL = "sqlite+aiosqlite:///cherry_bot.db"
engine = create_async_engine(DATABASE_URL, echo=False, future=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine, class_=AsyncSession)
Base = declarative_base()
waiting_for_weather = set()
waiting_for_ball = set()
reminders = {}


class UserCherries(Base):
    __tablename__ = 'user_cherries'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True, index=True)
    cherries = Column(Integer, default=0)
    total_spent = Column(Integer, default=0)
    card_1 = Column(Integer, default=0)
    card_2 = Column(Integer, default=0)
    card_3 = Column(Integer, default=0)
    card_4 = Column(Integer, default=0)
    card_5 = Column(Integer, default=0)
    card_6 = Column(Integer, default=0)
    card_7 = Column(Integer, default=0)
    card_8 = Column(Integer, default=0)
    card_9 = Column(Integer, default=0)
    card_10 = Column(Integer, default=0)


async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


async def init_user(user_id):
    async with SessionLocal() as session:
        result = await session.execute(select(UserCherries).where(UserCherries.user_id == user_id))
        user = result.scalars().first()
        if not user:
            user = UserCherries(user_id=user_id, cherries=0, total_spent=0)
            session.add(user)
            await session.commit()


async def get_user(user_id):
    async with SessionLocal() as session:
        result = await session.execute(select(UserCherries).where(UserCherries.user_id == user_id))
        return result.scalars().first()


async def update_user(user):
    async with SessionLocal() as session:
        session.add(user)
        await session.commit()


async def add_cherries(user_id, amount):
    user = await get_user(user_id)
    if user:
        user.cherries += amount
        await update_user(user)


async def add_spent(user_id, amount):
    user = await get_user(user_id)
    if user:
        user.total_spent += amount
        user.cherries -= amount
        await update_user(user)


async def count_total_cards(user):
    total = 0
    for i in range(1, 11):
        total += getattr(user, f'card_{i}')
    return total


async def check_all_cards_collected(user):
    total = await count_total_cards(user)
    return total == 10


from sqlalchemy import and_

async def determine_user_place(user):
    async with SessionLocal() as session:
        filters = [getattr(UserCherries, f'card_{i}') == 1 for i in range(1, 11)]
        results = await session.execute(
            select(UserCherries).where(and_(*filters)).order_by(UserCherries.total_spent)
        )
        users = results.scalars().all()

        if not users:
            # –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ 1 –º–µ—Å—Ç–µ
            return 1

        for idx, u in enumerate(users, start=1):
            if u.user_id == user.user_id:
                return idx
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ (—á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –µ—Å–ª–∏ –æ–Ω —Å–æ–±—Ä–∞–ª –≤—Å–µ –∫–∞—Ä—Ç—ã)
        return len(users) + 1  # –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—Ç–µ


async def update_user_cherries(user_id: int, count: int):
    async with SessionLocal() as session:
        result = await session.execute(select(UserCherries).where(UserCherries.user_id == user_id))
        user = result.scalars().first()
        if user:
            user.cherries += count
            session.add(user)
        else:
            new_user = UserCherries(user_id=user_id, cherries=count)
            session.add(new_user)
        await session.commit()


async def send_reminder(text, chat_id):
    await bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")


async def schedule_reminders():
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

commands_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="/help"),
            KeyboardButton(text="/set_reminder")
        ],
        [
            KeyboardButton(text="/weather"),
            KeyboardButton(text="/ranking")
        ],
        [
            KeyboardButton(text="/stop")
        ]
    ],
    resize_keyboard=True
)


@dp.message(Command('start'))
async def start(message: types.Message):
    await init_user(message.from_user.id)
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –Ø CherryGuru_bot.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help.",
        reply_markup=commands_keyboard
    )


@dp.message(Command('help'))
async def help_command(message: types.Message):
    await message.reply(
        "/play - –ò–≥—Ä–∞–π—Ç–µ —Å –±–æ—Ç–æ–º\n"
        "/set_reminder - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/cherrys - –£–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—à–µ–Ω\n"
        "/buy - –ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—É\n"
        "/card_count - –£–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç\n"
        "/stop - –ü—Ä–µ—Ä–≤–∞—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
        "/ball - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
        "/weather - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/ranking - –£–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ"
    )


@dp.message(Command('stop'))
async def stop_command(message: types.Message):
    user_id = message.from_user.id
    reminders.pop(user_id, None)
    waiting_for_weather.discard(user_id)
    waiting_for_ball.discard(user_id)
    await message.reply("–í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


@dp.message(Command('play'))
async def play_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', callback_data='rps_game'),
            InlineKeyboardButton(text='–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞', callback_data='coin_flip_game')
        ]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=keyboard)


@dp.message(Command('cherrys'))
async def show_cherrys(message: types.Message):
    user = await get_user(message.from_user.id)
    if user:
        await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—à–µ–Ω: {user.cherries} üçí.")
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command('buy'))
async def buy_card(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if not user:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if user.cherries < 30:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∏—à–µ–Ω. –ù—É–∂–Ω–æ 30.")
        return
    total_cards = await count_total_cards(user)
    if total_cards >= 10:
        await message.reply("–£ –≤–∞—Å —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –∫–∞—Ä—Ç—ã.")
        return
    card_number = random.randint(1, 10)
    card_attr = f'card_{card_number}'
    user.cherries -= 30
    user.total_spent += 30
    if getattr(user, card_attr) == 0:
        setattr(user, card_attr, 1)
        file_path = (f'C:\\Users\\user\\PycharmProjects\\CherryGuru_bot\\cards\\photo{card_number}.jpg')
        if not os.path.isfile(file_path):
            await message.answer("–§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await message.answer_photo(photo=FSInputFile(file_path, filename=f'–ö–∞—Ä—Ç–∞ {card_number}'))
        total = await count_total_cards(user)
        await message.reply(f"–í–∞–º –¥–æ—Å—Ç–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∞ {card_number}. –í—Å–µ–≥–æ –∫–∞—Ä—Ç: {total}/10.")
        if total == 10:
            place = await determine_user_place(user)
            await message.reply(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –∏ –∑–∞–Ω—è–ª–∏ {place} –º–µ—Å—Ç–æ.")
    else:
        await message.reply(f"–ö–∞—Ä—Ç–∞ {card_number} —É–∂–µ –µ—Å—Ç—å.")
    await update_user(user)


@dp.message(Command('card_count'))
async def show_card_count(message: types.Message):
    user = await get_user(message.from_user.id)
    if user:
        total = await count_total_cards(user)
        await message.reply(f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç: {total}/10.")
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command('ranking'))
async def show_ranking(message: types.Message):
    user = await get_user(message.from_user.id)
    if user:
        all_collected = await check_all_cards_collected(user)
        if not all_collected:
            await message.reply("–°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        place = await determine_user_place(user)
        if place > 0:
            await message.reply(f"–í—ã –Ω–∞ {place} –º–µ—Å—Ç–µ.")
        else:
            await message.reply("–í–∞—à–µ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.")
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command('reset'))
async def reset_progress(message: types.Message):
    user_id = message.from_user.id
    reminders[user_id] = {'action': 'reset'}
    await message.reply("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")


@dp.message(lambda msg: msg.text and msg.text.lower() in ['–¥–∞', '–Ω–µ—Ç'])
async def confirm_reset(msg: types.Message):
    user_id = msg.from_user.id
    if user_id in reminders and reminders[user_id].get('action') == 'reset':
        if msg.text.lower() == '–¥–∞':
            async with SessionLocal() as session:
                result = await session.execute(select(UserCherries).where(UserCherries.user_id == user_id))
                user = result.scalars().first()
                if user:
                    user.cherries = 0
                    user.total_spent = 0
                    for i in range(1, 11):
                        setattr(user, f'card_{i}', 0)
                    await session.commit()
                    await msg.reply("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω.")
                else:
                    await msg.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await msg.reply("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
        del reminders[user_id]


@dp.callback_query(lambda c: c.data == 'rps_game')
async def rps_game_callback(c: types.CallbackQuery):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–ö–∞–º–µ–Ω—å', callback_data='rps_rock'),
            InlineKeyboardButton(text='–ù–æ–∂–Ω–∏—Ü—ã', callback_data='rps_scissors'),
            InlineKeyboardButton(text='–ë—É–º–∞–≥–∞', callback_data='rps_paper')
        ]
    ])
    await c.answer()
    await c.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞:", reply_markup=builder)


@dp.callback_query(lambda c: c.data == 'coin_flip_game')
async def coin_flip_callback(c: types.CallbackQuery):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–û—Ä–µ–ª', callback_data='coin_head'),
            InlineKeyboardButton(text='–†–µ—à–∫–∞', callback_data='coin_tail')
        ]
    ])
    await c.answer()
    await c.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ: –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞:", reply_markup=builder)


@dp.callback_query(lambda c: c.data.startswith('rps_'))
async def rps_choice_callback(c: types.CallbackQuery):
    choices_map = {
        'rock': '–∫–∞–º–µ–Ω—å',
        'scissors': '–Ω–æ–∂–Ω–∏—Ü—ã',
        'paper': '–±—É–º–∞–≥–∞'
    }
    user_choice_key = c.data.split('_')[1]
    user_choice_ru = choices_map.get(user_choice_key)
    bot_choice_ru = random.choice(['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'])
    if (user_choice_ru == '–∫–∞–º–µ–Ω—å' and bot_choice_ru == '–Ω–æ–∂–Ω–∏—Ü—ã') or \
            (user_choice_ru == '–Ω–æ–∂–Ω–∏—Ü—ã' and bot_choice_ru == '–±—É–º–∞–≥–∞') or \
            (user_choice_ru == '–±—É–º–∞–≥–∞' and bot_choice_ru == '–∫–∞–º–µ–Ω—å'):
        user = await get_user(c.from_user.id)
        user.cherries += 1
        await update_user(user)
        await c.answer(f"–ü–æ–±–µ–¥–∞! –í—ã {user_choice_ru}, –±–æ—Ç {bot_choice_ru}. +1 üçí")
    elif user_choice_ru == bot_choice_ru:
        await c.answer(f"–ù–∏—á—å—è! –û–±–∞ –≤—ã–±—Ä–∞–ª–∏ {bot_choice_ru}.")
    else:
        await c.answer(f"–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã {user_choice_ru}, –±–æ—Ç {bot_choice_ru}.")


@dp.callback_query(lambda c: c.data.startswith('coin_'))
async def coin_choice_callback(c: types.CallbackQuery):
    choices_map = {
        'head': '–æ—Ä—ë–ª',
        'tail': '—Ä–µ—à–∫–∞',
    }
    user_choice_key = c.data.split('_')[1]
    user_choice_ru = choices_map.get(user_choice_key)
    bot_choice_en = random.choice(['head', 'tail'])
    bot_choice_ru = choices_map[bot_choice_en]
    if user_choice_ru == bot_choice_ru:
        user = await get_user(c.from_user.id)
        user.cherries += 1
        await update_user(user)
        await c.answer(f"–ü–æ–±–µ–¥–∞! –í—ã {user_choice_ru}, –≤—ã–ø–∞–ª–æ {bot_choice_ru}. +1 üçí")
    else:
        await c.answer(f"–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã {user_choice_ru}, –≤—ã–ø–∞–ª–æ {bot_choice_ru}.")


@dp.message(Command('set_reminder'))
async def set_reminder_cmd(message: types.Message):
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≥–æ–¥ –º–µ—Å—è—Ü –¥–µ–Ω—å —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: 2025 05 21 23:23")
    reminders[message.from_user.id] = {'awaiting_datetime': True}


@dp.message(Command('weather'))
async def cmd_weather(message: types.Message):
    user_id = message.from_user.id
    waiting_for_weather.add(user_id)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É:")


@dp.message(Command('ball'))
async def cmd_ball(message: types.Message):
    user_id = message.from_user.id
    waiting_for_ball.add(user_id)
    await message.reply("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –¥–∞–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")


@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    if user_id in waiting_for_weather:
        city = message.text.strip()
        city_encoded = urllib.parse.quote(city)
        url = f"https://yandex.ru/pogoda/{city_encoded}"
        await message.reply(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {city}: {url}")
        waiting_for_weather.remove(user_id)
        return
    if user_id in waiting_for_ball:
        responses = [
            "–î–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ!",
            "–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç.",
            "–Ø –±—ã –Ω–∞ –≤–∞—à–µ–º –º–µ—Å—Ç–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª.",
            "–û—Ç–≤–µ—Ç —Ç—É–º–∞–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            "–î–∞, –Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            "–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.",
            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–µ!",
            "–î–∞, –∫–æ–Ω–µ—á–Ω–æ!",
            "–°–µ–π—á–∞—Å –Ω–µ –ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç.",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "–ù–µ –≤—Å–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ.",
            "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º.",
            "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –¥–∞.",
            "–°—á–∏—Ç–∞–π—Ç–µ —ç—Ç–æ –∑–Ω–∞–∫–æ–º.",
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—Ä–∞–≤—ã.",
            "–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å —Å –≤—ã–≤–æ–¥–∞–º–∏.",
            "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –∑–Ω–∞–∫.",
            "–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏.",
            "–ù–µ –∏—Å–∫–ª—é—á–µ–Ω–æ.",
            "–í—Å—ë —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –¥–∞.",
            "–í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ–≤–æ—Ä–∏—Ç '–¥–∞'.",
            "–î—É–º–∞–π—Ç–µ –¥–≤–∞–∂–¥—ã, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å."
        ]
        answer = random.choice(responses)
        await message.reply(answer)
        waiting_for_ball.remove(user_id)
        return
    if user_id in reminders:
        state = reminders[user_id]
        if state.get('awaiting_datetime'):
            try:
                parts = message.text.strip().split()
                if len(parts) != 4:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                year, month, day, time_str = parts
                hour, minute = map(int, time_str.split(':'))
                dt = datetime(int(year), int(month), int(day), hour, minute)
                if dt < datetime.now():
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.")
                    return
                state['datetime'] = dt
                await message.reply("–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
                state['awaiting_datetime'] = False
                state['awaiting_text'] = True
            except:
                await message.reply(
                    "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≥–æ–¥ –º–µ—Å—è—Ü –¥–µ–Ω—å —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: 2025 05 21 23:23")
        elif state.get('awaiting_text'):
            text = message.text
            dt = state['datetime']
            time_str = dt.strftime("%H:%M")
            aioschedule.every().day.at(time_str).do(send_reminder, text, message.chat.id)
            await message.reply("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            del reminders[user_id]


async def main():
    await init_db()
    asyncio.create_task(schedule_reminders())
    await dp.start_polling(bot)
